#!/usr/bin/python3
# -*- coding: iso-8859-15 -*-
# Kayuã@Collaborator%LEA(Unipampa) %ICN-Stage

import argparse
import os
import re
import json
import subprocess
import sys
import time
import logging
import time

try:

    from paramiko import SSHClient
    import paramiko

except ImportError as error:

    print(error)
    print()
    print("1. Setup a virtual environment: ")
    print("  python3 - m venv ~/Python3env/icn-stage ")
    print("  source ~/Python3env/icn-stage/bin/activate ")
    print()
    print("2. Install requirements:")
    print("  pip3 install --upgrade pip")
    print("  pip3 install -r requirements.txt \n")
    quit()


LOG_LEVEL = logging.DEBUG
TIME_FORMAT = '%Y-%m-%d,%H:%M:%S'
DEFAULT_SETTINGS_FILE = 'settings.json'
DEFAULT_REQUIREMENTS_FILE = 'requirements.txt'
DEFAULT_ZK_SETTINGS_FILE_DIR = 'apache-zookeeper-3.6.1/conf/zoo.cfg'
DEFAULT_VALUE_SETTINGS = [5, 6000, 12000, 10, 5, 2181, 256]
DEFAULT_ZK_LOCAL_MYID = '~/.zk/datadir/myid'
DEFAULT_REPOSIT_DEPENDENCES = []
DEFAULT_ZK_DIR = 'apache-zookeeper-3.6.1'
DEFAULT_REPOSIT_ZK = 'http://mirror.nbtelecom.com.br/apache/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz'
DEFAULT_REPOSIT_ICNSTAGE = 'https://github.com/RafaelDBeltran/icn-stage'
DEFAULT_ZK_SETTINGS = ['TickTime', 'MinSessionTimeOut', 'MaxSessionTimeOut', 'InitLimit', 'SyncLimit', 'ClientPort',
                       'MaxClientCnxns']
DEFAULT_SERVER_SETTINGS = ['ID','Host','User','Password']


class ZookeeperEnsembleSettings:

    OutPutSettings = """
    
#         File Settings Apache-Zookeeper.
#                
#   This Apache Zookeeper software configuration file was
#   automatically generated by ICN-Stage.
#   This file contains information regarding the
#   settings regarding the distributed installation
#   of ICN-State in its basic mode.
#   
#   The information in this file can be changed through
#   the Settings.json file in the ICN-Stage ~/Settings directory.
#   Play the ICN-Stage installation file when changing the file.
#   This file must remain next to the Apache-Zookeeper directory.

#   Settings Apache-Zookeeper:\n
"""
    ListServers = []

# Pronto, já foi testado. Colocar mensagens mais
# profissionais e alterar os nomes  de variáveis.
#   -----------------------------------------------------
    def __init__(self):

        self.read_settings_file()
        self.write_settings_in_file()

    def read_settings_file(self):

        logging.info(' Please Wait: Reading file Settings...\n')

        if os.path.exists(DEFAULT_SETTINGS_FILE):

            with open(DEFAULT_SETTINGS_FILE) as Settings:

                try:

                    SettingsFile = json.load(Settings)
                    logging.info('Zookeeper Settings:\n')

                    if len(SettingsFile) == 1:

                        print(' ' * 21 + 'Mode: Single.\n')
                        logging.info('-' * 32 + '\n')
                        logging.info('ICN-Stage Server Director:\n')

                    else:

                        print(' ' * 21 + 'Mode: Ensambled\n')
                        logging.info('-' * 32 + '\n')
                        logging.info('ICN-Stage Servers Directors:\n')

                    for IdParameter, Parameter in enumerate(DEFAULT_ZK_SETTINGS):

                        DEFAULT_VALUE_SETTINGS[IdParameter] = (SettingsFile['Settings'][0][Parameter])
                        print(' '*20, DEFAULT_ZK_SETTINGS[IdParameter], DEFAULT_VALUE_SETTINGS[IdParameter])

                    for Iterator in SettingsFile['Server']:

                        logging.info('  '+'Server ID: '+Iterator['Id']+' Host: '+Iterator['Host'])
                        NewServer = [{DEFAULT_SERVER_SETTINGS[0]: Iterator['Id']},
                                     {DEFAULT_SERVER_SETTINGS[1]: Iterator['Host']},
                                     {DEFAULT_SERVER_SETTINGS [2]: Iterator['UserName']},
                                     {DEFAULT_SERVER_SETTINGS[3]: Iterator['Password']}]
                        self.ListServers.append(NewServer)
                    print('\n')
                except:

                    logging.debug('\nERROR: The configuration Settings.json file may be corrupted.')
        else:

            logging.info('\nERROR: The configuration Settings.json file not found.')
            quit()
    def write_settings_in_file(self):


        for key, Parameters in enumerate(DEFAULT_ZK_SETTINGS):

            self.OutPutSettings += (str(Parameters) + '=' + str(DEFAULT_VALUE_SETTINGS[key]) + '\n')


        for Server in self.ListServers:

            self.OutPutSettings += ('Server.' + Server[0]['ID'] + '=' + Server[1]['Host'] + ':2888:3888\n')

        return self.OutPutSettings
#   -----------------------------------------------------

class ConnectServers:

    State = False

# Pronto, já foi testado. Colocar mensagens mais
# profissionais e alterar os nomes  de variáveis.
#   -----------------------------------------------------
    def __init__(self, Server):

        logging.info(' Contacting Server ID: %s' %Server[0]['ID'])
        logging.info(' Awaiting Response.Please wait...')
        self.ssh = SSHClient()
        self.ssh.load_system_host_keys()
        self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        try:

            self.ssh.connect(hostname=Server[1]['Host'], username=Server[2]['User'],
                             password=str(Server[3]['Password']))
            logging.info('\n Server Reached. Connection established.\n')
            self.State = True

        except:

            logging.info('\nERROR: Connection refused.')
            self.State = False

    def GetStateConnection(self):

        return self.State

    def CloseConnection(self):

        self.State = False
        self.ssh.close()

    def Command(self, cmd):

        try:

            stdin, stdout, stderr = self.ssh.exec_command(cmd)
            return stdout.read()

        except:

            self.State = False
#   -----------------------------------------------------

class Installer:

    DependencesMissing = []

    # Pronto, já foi testado. Colocar mensagens mais
    # profissionais e alterar os nomes  de variáveis.
#   -----------------------------------------------------

    def __init__(self):

        self.settings = ZookeeperEnsembleSettings()
    def local_install(self):

        logging.info('-' * 32 + '\n')
        logging.info('Starting local installer. Please wait...\n')

        try:

            self.local_install_zookeeeper()
            self.local_install_dependences()
            self.zookeeper_settings = self.settings.OutPutSettings
            self.local_settings_zookeeper()
            logging.info('Done.')

        except:

           logging.info('ERROR: Error during installation')
    def local_install_zookeeeper(self):


        logging.info('  Starting Zookeeper installer.\n')
        logging.info('     > Downloading Apache-Zookeeper-3.6.1\n')

        try:

            cmd = ['wget', DEFAULT_REPOSIT_ZK]
            subprocess.call(cmd)
            logging.info('      > Extracting files from Apache Zookeeper.\n')
            cmd = ['tar', 'zxf', 'apache-zookeeper-3.6.1-bin.tar.gz']
            subprocess.run(cmd)
            cmd = ['mv', 'apache-zookeeper-3.6.1-bin', 'apache-zookeeper-3.6.1']
            subprocess.run(cmd)
            cmd = ['rm', 'apache-zookeeper-3.6.1-bin.tar.gz']
            subprocess.run(cmd)
            logging.info('-' * 32 + '\n')

        except:

            logging.info('Error: It is not possible to install Apache-Zookeeper')
            quit()

        # Pronto, já foi testado
    def local_install_dependences(self):

        logging.info('Starting dependency installer. Please wait...\n')

        try:

            logging.info('     > Update python3-pip\n')
            cmd = ['apt-get', 'install', 'python3-pip']
            subprocess.Popen(cmd, stdout=subprocess.PIPE)
            cmd = ['pip3', 'install', '--upgrade', 'pip']
            subprocess.run(cmd)
            logging.info('     > Install requirements.\n')
            cmd = ['pip3', 'install', '-r', 'requirements.txt']
            subprocess.run(cmd)
            logging.info('Done. Dependences installed.\n')
            logging.info('-' * 32 + '\n')

        except:

            logging.info('Error: It is not possible to install dependences.')
            quit()
    def local_settings_zookeeper(self):

        logging.info('Generating Apache-Zookeeper settings file. Please wait...')

        try:

            with open(DEFAULT_ZK_SETTINGS_FILE_DIR,'w') as zooconfig:
                zooconfig.write(self.zookeeper_settings)

        except:

            logging.info('Error. Settings Apache-Zookeeper file.')
            quit()

#   ------------------------------------------------------


    def remote_install(self,settings):

        logging.info('\n\n Starting remote installer . Please wait...')

        for server in settings.ListServers:

            connection = ConnectServers(server)

            if connection.GetStateConnection():

                try:

                    self.remote_install_icn_stage(connection)
                    self.remote_install_zookeeper(connection,server,settings)
                    #self.remote_install_dependences(connection,self.remote_list_dependences(connection))
                    connection.CloseConnection()

                except:

                    logging.info('ERROR: Error during installation')

            else:

                logging.info('Error: Connection Refused')

        logging.info('Sucessfull instalation.')
    def remote_list_dependences(self, connection):

        DependencesMissingCommand = []
        DependencesInstaled = []

        ServerResponse = connection.Command('apt list --installed ')

        if not connection.GetStateConnection():
            logging.info('\nERROR: Server not reached.')

        for Requirements in DEFAULT_REPOSIT_DEPENDENCES[0]:

            if type(re.search(Requirements, str(ServerResponse))) == type(None):

                self.DependencesMissing.append(Requirements)
                DependencesMissingCommand.append(Settings.ListRequirements[0][Requirements])

            else:

                DependencesInstaled.append(Requirements)

        logging.info('\nERROR: Error while generating the settings file remotely.')

        for NumDep, Dependences in enumerate(Settings.ListRequirements[0]):

            logging.info('    %s - %s    ' %NumDep %Dependences)


        logging.info('\n    Missing Dependences:\n\n')

        for NumDep, Dependences in enumerate(self.DependencesMissing):

            logging.info('    %s - %s    ' %NumDep %Dependences)

        return DependencesMissingCommand
    def remote_install_dependences(self, connection, dependenceslist):

        if len(dependenceslist):

            if str(input()) == 'YES':

                dir = str(connection.Command('pwd'))
                dir = ('/' + dir[3:dir.index('n') - 1] + '/ICN-Stage')

                for position, Command in enumerate(dependenceslist):

                    logging.info('\nDownloading. %s Please wait...' % Command[10:])
                    connection.Command(Command)
                    DependenceName= self.DependencesMissing[position]
                    cmd = 'mv ' + DependenceName[8:] + '/' + DependenceName[8:] + ' ' + dir
                    connection.Command(cmd)
                    logging.info('Done.')

            else:

                logging.info('\nERROR: Server unavailable for use.')
        else:

            logging.info('\n It has been detected that currently all dependencies are already installed.\n')







    def remote_install_icn_stage(self, connection):

        logging.info('  Starting ICN-Stage remote installer.\n')
        logging.info('     > Downloading ICN-Stage\n')

        try:

            logging.info('     > Downloading ICN-Stage.Please wait...\n')
            logging.info('     >  Settings git clone.\n')
            cmd = ('apt-get '+'install '+'git ')
            connection.Command(cmd)
            cmd = ('git clone '+DEFAULT_REPOSIT_ICNSTAGE)
            connection.Command(cmd)
            logging.info('Done\n\n ICN-Stage download completed.\n')

        except:

            logging.info('\nERROR: Downloading of ICN-Stage failed!.')
            quit()
    def remote_install_zookeeper(self, connection, server, settings):

        logging.info('  Starting Apache-Zookeeper-3.6.1 remote installer.\n')
        logging.info('     > Downloading Apache-Zookeeper-3.6.1.tar.gz\n')

        try:

            cmd = ('wget ', DEFAULT_REPOSIT_ZK)
            connection.Command(cmd)
            logging.info('      > Extracting files from Apache Zookeeper.\n')
            cmd = ('tar ', 'zxf ', 'apache-zookeeper-3.6.1-bin.tar.gz')
            connection.Command(cmd)
            cmd = ('mv ', 'apache-zookeeper-3.6.1-bin ', 'apache-zookeeper-3.6.1')
            connection.Command(cmd)
            cmd = ('rm', 'apache-zookeeper-3.6.1-bin.tar.gz')
            subprocess.run(cmd)
            logging.info('-' * 32 + '\n')

        except:

            logging.info('\nERROR: Error Apache-Zookeeper install.')


    # Editar vagrant_inbox_install
    def vagrant_inbox_install(self):
        print('config')

def main():

    # arguments
    parser = argparse.ArgumentParser(description='Daemon Worker')
    help_msg = "logging level (INFO=%d DEBUG=%d)" % (logging.INFO, logging.DEBUG)
    parser.add_argument("--log", "-l", help=help_msg, default=logging.INFO, type=int)
    help_msg = "unique id (str) for multiple daemons"
    parser.add_argument("--id", "-i", help=help_msg, default="default", type=str)
    help_msg = "requirements file"
    parser.add_argument("--requirements", "-r", help=help_msg, default=DEFAULT_REQUIREMENTS_FILE, type=str)
    help_msg = "settings file"
    parser.add_argument("--settings", "-s", help=help_msg, default=DEFAULT_SETTINGS_FILE, type=str)
    install_choices = ['local', 'vagrant', 'remote_single', 'remote_ensemble']
    parser.add_argument('install', choices=install_choices)

    # read arguments from the command line

    args = parser.parse_args()

    # setup the logging facility

    if args.log == logging.DEBUG:
        logging.basicConfig(format='%(asctime)s %(levelname)s {%(module)s} [%(funcName)s] %(message)s',
                            datefmt=TIME_FORMAT, level=args.log)

    else:

        logging.basicConfig(format='%(asctime)s %(message)s',
                            datefmt=TIME_FORMAT, level=args.log)

    # shows input parameters
    logging.info("")
    logging.info("INPUT")
    logging.info("---------------------")
    logging.info("\t logging level     : %s" % args.log)
    logging.info("\t unique id         : %s" % args.id)
    logging.info("\t install option    : %s" % args.install)
    logging.info("\t requirements file : %s" % args.requirements)
    logging.info("\t settings file     : %s" % args.settings)
    logging.info("")

#  Instalação local

    # 1- Ler o arquivo de configurações
    # 2- Listar as dependencias da máquina atual
    # 3- instalar as dependencias
    # 4- instalar o ICN-Stage
    # 5- instalar o zookeeper
    # 6- adicionar as configurações
    installer = Installer()
    if args.install == 'local':
        installer.local_install()

    elif args.install == 'vagrant':
        installer.local_install()
        installer.vagrant_config()

    elif args.install == 'remote':
        # logging.info("Stopping worker daemon")
        # worker_daemon.stop()
        installer.remote_install()


    elif args.install == 'help':
        print('Ajuda')


# worker_daemon.stop()

#
# elif args.cmd == 'restart':
# 	logging.info("Restarting worker daemon")
# 	worker_daemon.restart()
#
# elif args.cmd == 'status':
# 	daemon_pid = worker_daemon.getpid()
#
# 	if not daemon_pid:
# 		logging.info("Worker Daemon (id='%s') isn't running" % (args.id))
# 	else:
# 		logging.info("Worker Daemon (id='%s') is running [PID=%d]" % (args.id, daemon_pid))


if __name__ == '__main__':
    sys.exit(main())
