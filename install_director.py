#!/usr/bin/python3
# -*- coding: iso-8859-15 -*-
# Kayuã@Collaborator%LEA(Unipampa*) %ICN-Stage

import argparse
import os
import re
import json
import subprocess
import sys
import time
import logging
import time

try:

    from paramiko import SSHClient
    import paramiko

except ImportError as error:

    print(error)
    print()
    print("1. Setup a virtual environment: ")
    print("  python3 - m venv ~/Python3env/icn-stage ")
    print("  source ~/Python3env/icn-stage/bin/activate ")
    print()
    print("2. Install requirements:")
    print("  pip3 install --upgrade pip")
    print("  pip3 install -r requirements.txt \n")
    quit()

# % Values default.

LOG_LEVEL = logging.DEBUG
TIME_FORMAT = '%Y-%m-%d,%H:%M:%S'
DEFAULT_SETTINGS_FILE = 'settings.json'
DEFAULT_REQUIREMENTS_FILE = 'requirements.txt'
DEFAULT_ZK_SETTINGS_FILE_DIR = 'apache-zookeeper-3.6.1/conf/zoo.cfg'
DEFAULT_VALUE_SETTINGS = [5, 6000, 12000, 10, 5, 2181, 256]
DEFAULT_ZK_LOCAL_MYID = '~/.zk/datadir/myid'
DEFAULT_REPOSIT_DEPENDENCES = []
DEFAULT_ZK_DIR = 'apache-zookeeper-3.6.1'
DEFAULT_REPOSIT_ZK = 'http://mirror.nbtelecom.com.br/apache/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz'
DEFAULT_REPOSIT_ICNSTAGE = 'https://github.com/RafaelDBeltran/icn-stage'
DEFAULT_SERVER_SETTINGS = ['ID', 'Host', 'User', 'Password']
DEFAULT_DEPENDENCES = ['kazoo', 'paramiko', 'scp', 'netifaces', 'pyfiglet', 'tqdm', 'psutil']
DEFAULT_ZK_SETTINGS = ['TickTime', 'MinSessionTimeOut', 'MaxSessionTimeOut', 'InitLimit', 'SyncLimit', 'ClientPort',
                       'MaxClientCnxns']


class ZookeeperEnsembleSettings:
    OutPutSettings = """
    
#         File Settings Apache-Zookeeper.
#                
#   This Apache Zookeeper software configuration file was
#   automatically generated by ICN-Stage.
#   This file contains information regarding the
#   settings regarding the distributed installation
#   of ICN-State in its basic mode.
#   
#   The information in this file can be changed through
#   the Settings.json file in the ICN-Stage ~/Settings directory.
#   Play the ICN-Stage installation file when changing the file.
#   This file must remain next to the Apache-Zookeeper directory.

#   Settings Apache-Zookeeper:\n
"""
    ListServers = []

    def __init__(self):

        self.read_settings_file()
        self.write_settings_in_file()

    def read_settings_file(self):

        logging.info(' Please Wait: Reading file Settings...\n')

        if os.path.exists(DEFAULT_SETTINGS_FILE):

            with open(DEFAULT_SETTINGS_FILE) as Settings:

                try:

                    SettingsFile = json.load(Settings)
                    logging.info('Zookeeper Settings:\n')

                    if len(SettingsFile) == 1:

                        print(' ' * 21 + 'Mode: Single.\n')
                        logging.info('-' * 32 + '\n')
                        logging.info('ICN-Stage Server Director:\n')

                    else:

                        print(' ' * 21 + 'Mode: Ensambled\n')
                        logging.info('-' * 32 + '\n')
                        logging.info('ICN-Stage Servers Directors:\n')

                    for IdParameter, Parameter in enumerate(DEFAULT_ZK_SETTINGS):
                        DEFAULT_VALUE_SETTINGS[IdParameter] = (SettingsFile['Settings'][0][Parameter])
                        print(' ' * 20, DEFAULT_ZK_SETTINGS[IdParameter], DEFAULT_VALUE_SETTINGS[IdParameter])

                    for Iterator in SettingsFile['Server']:
                        log = ('  ' + 'Server ID: ' + Iterator['Id'] + ' Host: ' + Iterator['Host'])
                        logging.info(log)
                        NewServer = [{DEFAULT_SERVER_SETTINGS[0]: Iterator['Id']},
                                     {DEFAULT_SERVER_SETTINGS[1]: Iterator['Host']},
                                     {DEFAULT_SERVER_SETTINGS[2]: Iterator['UserName']},
                                     {DEFAULT_SERVER_SETTINGS[3]: Iterator['Password']}]
                        self.ListServers.append(NewServer)

                    print('\n')

                except ValueError:

                    logging.error('The configuration Settings.json file may be corrupted.', ValueError)
        else:

            logging.error('The configuration Settings.json file not found.')
            quit()

    def write_settings_in_file(self):

        for key, parameters in enumerate(DEFAULT_ZK_SETTINGS):
            self.OutPutSettings += (str(parameters) + '=' + str(DEFAULT_VALUE_SETTINGS[key]) + '\n')

        for server in self.ListServers:
            self.OutPutSettings += ('Server.' + server[0]['ID'] + '=' + server[1]['Host'] + ':2888:3888\n')

        return self.OutPutSettings

    @staticmethod
    def define_director_id(server):

        return server[DEFAULT_SERVER_SETTINGS[0]]


class Connect:
    State = False

    def __init__(self, server):

        logging.info(' Contacting Server ID: %s' % server[0]['ID'])
        logging.info(' Awaiting Response.Please wait...')
        self.ssh = SSHClient()
        self.ssh.load_system_host_keys()
        self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        try:

            self.ssh.connect(hostname=Server[1]['Host'], username=server[2]['User'],
                             password=str(Server[3]['Password']))
            logging.info('\n Server Reached. Connection established.\n')
            self.State = True

        except ValueError:

            logging.error(' Connection refused.', ValueError)
            self.State = False

    def get_state_connection(self):

        return self.State

    def close_connection(self):

        self.State = False
        self.ssh.close()

    def cmd(self, cmd):

        try:

            std, stdout, stderr = self.ssh.exec_command(cmd)
            return stdout.read()

        except ValueError:

            self.State = False


class Installer:
    DependenceMissing = []

    def __init__(self):

        self.settings = ZookeeperEnsembleSettings()
        self.zookeeper_settings = self.settings.OutPutSettings

    def local_install(self):

        logging.info('-' * 32 + '\n')
        logging.info('Starting local installer. Please wait...\n')

        try:

            self.local_install_zookeeeper()
            self.local_install_dependences()
            self.local_settings_zookeeper()
            logging.info('Done.')

        except ValueError:

            logging.error('Error during installation.', ValueError)

    @staticmethod
    def local_install_zookeeeper():

        logging.info('  Starting Zookeeper installer.\n')
        logging.info('     > Downloading Apache-Zookeeper-3.6.1\n')

        try:

            cmd = ['wget', DEFAULT_REPOSIT_ZK]
            subprocess.call(cmd)
            logging.info('      > Extracting files from Apache Zookeeper.\n')
            cmd = ['tar', 'zxf', 'apache-zookeeper-3.6.1-bin.tar.gz']
            subprocess.run(cmd)
            cmd = ['mv', 'apache-zookeeper-3.6.1-bin', 'apache-zookeeper-3.6.1']
            subprocess.run(cmd)
            cmd = ['rm', 'apache-zookeeper-3.6.1-bin.tar.gz']
            subprocess.run(cmd)
            logging.info('-' * 32 + '\n')

        except ValueError:

            logging.error('It is not possible to install Apache-Zookeeper', ValueError)
            quit()

    @staticmethod
    def local_install_dependences():

        logging.info('Starting dependency installer. Please wait...\n')

        try:

            logging.info('     > Update python3-pip\n')
            cmd = ['apt-get', 'install', 'python3-pip']
            subprocess.Popen(cmd, stdout=subprocess.PIPE)
            cmd = ['pip3', 'install', '--upgrade', 'pip']
            subprocess.run(cmd)
            logging.info('     > Install requirements.\n')
            cmd = ['pip3', 'install', '-r', 'requirements.txt']
            subprocess.run(cmd)
            logging.info('Done. Dependence installed.\n')
            logging.info('-' * 32 + '\n')

        except ValueError:

            logging.error('It is not possible to install dependence.', ValueError)
            quit()

    def local_settings_zookeeper(self):

        logging.info('Generating Apache-Zookeeper settings file. Please wait...')

        try:

            with open(DEFAULT_ZK_SETTINGS_FILE_DIR, 'w') as zoo_config:

                zoo_config.write(self.zookeeper_settings)
                zoo_config.close()

            with open(DEFAULT_ZK_LOCAL_MYID, 'w') as zoo_id:

                zoo_id.write('1')
                zoo_id.close()

        except ValueError:

            logging.error('Settings Apache-Zookeeper file.', ValueError)
            quit()

    #   ------------------------------------------------------

    def remote_install(self):

        logging.info('\n\n Starting remote installer. Please wait...')

        for server in self.settings.ListServers:

            connection = Connect(server)

            if connection.get_state_connection():

                try:

                    self.remote_install_icn_stage(connection)
                    self.remote_install_zookeeper(connection)
                    self.remote_list_dependences(connection)
                    self.remote_install_dependences(connection, self.remote_list_dependences(connection))
                    connection.close_connection()

                except ValueError:

                    logging.error('Error during installation', ValueError)

            else:

                logging.error('Connection Refused')

        logging.info('Sucessfull instalation.')

    def remote_list_dependences(self, connection):

        DependencesMissingCommand = []
        DependencesInstaled = []

        cmd = ('apt ', 'list', '--installed')
        server_response = connection.cmd(cmd)

        if not connection.get_state_connection():
            logging.error('Connection refused.')

        for requirements in DEFAULT_DEPENDENCES:

            if isinstance(re.search(requirements, str(server_response)), type(None)):

                self.DependencesMissing.append(requirements)

            else:

                DependencesInstaled.append(requirements)

        logging.info('    Installed Dependences:\n')

        for NumDep, Dependence in enumerate(Settings.ListRequirements[0]):
            logging.info('    %s - %s    ' % NumDep % Dependence)

        logging.info('    Missing Dependences:\n')

        for NumDep, Dependence in enumerate(self.DependencesMissing):
            logging.info('    %s - %s    ' % NumDep % Dependence)

        return DependencesMissingCommand

    @staticmethod
    def remote_install_dependences(connection, dependence_list):

        if len(dependence_list):

            logging.info('Starting dependency installer. Please wait...\n')

            try:

                logging.info('     > Update python3-pip\n')
                cmd = ['apt-get', 'install', 'python3-pip']
                connection.cmd(cmd)
                cmd = ['pip3', 'install', '--upgrade', 'pip']
                connection.cmd(cmd)
                logging.info('     > Install requirements.\n\n')

                for requirements in dependence_list:
                    logging.info('          > Instaling: ' + requirements + '\n')
                    cmd = ['pip3', 'install', requirements]
                    connection.cmd(cmd)

                logging.info('  Done. Dependence installed.\n')
                logging.info('-' * 32 + '\n')

            except ValueError:

                logging.error('It is not possible to install dependences.', ValueError)
                quit()

    @staticmethod
    def remote_install_icn_stage(connection):

        logging.info('  Starting ICN-Stage remote installer.\n')
        logging.info('     > Downloading ICN-Stage\n')

        try:

            logging.info('     > Downloading ICN-Stage.Please wait...\n')
            logging.info('     >  Settings git clone.\n')
            cmd = ('apt-get ' + 'install ' + 'git ')
            connection.cmd(cmd)
            cmd = ('git clone ' + DEFAULT_REPOSIT_ICNSTAGE)
            connection.cmd(cmd)
            logging.info('Done\n\n ICN-Stage download completed.\n')

        except ValueError:

            logging.error('Downloading of ICN-Stage failed!.', ValueError)
            quit()

    @staticmethod
    def remote_install_zookeeper(connection):

        logging.info('  Starting Apache-Zookeeper-3.6.1 remote installer.\n')
        logging.info('     > Downloading Apache-Zookeeper-3.6.1.tar.gz\n')

        try:

            cmd = ('wget ', DEFAULT_REPOSIT_ZK)
            connection.cmd(cmd)
            logging.info('      > Extracting files from Apache Zookeeper.\n')
            cmd = ('tar ', 'zxf ', 'apache-zookeeper-3.6.1-bin.tar.gz')
            connection.cmd(cmd)
            cmd = ('mv ', 'apache-zookeeper-3.6.1-bin ', 'apache-zookeeper-3.6.1')
            connection.cmd(cmd)
            cmd = ('rm', 'apache-zookeeper-3.6.1-bin.tar.gz')
            subprocess.run(cmd)
            logging.info('-' * 32 + '\n')

        except ValueError:

            logging.error('Error Apache-Zookeeper install.', ValueError)

    def remote_settings_zookeeper(self, connection):

        logging.info('Generating Apache-Zookeeper settings file. Please wait...')

        try:

            cmd = ('echo "', self.zookeeper_settings, '" > ', 'apache-zookeeper-3.6.1/conf/zoo.cfg')
            connection.cmd(cmd)
            cmd = ('echo "', self.zookeeper_settings, '" > ', DEFAULT_ZK_LOCAL_MYID)
            connection.cmd(cmd)

        except ValueError:

            logging.error('Settings Apache-Zookeeper file.', ValueError)
            quit()

    @staticmethod
    def vagrant_inbox_install():

        print('config')


def help_inst():

    info = ('   \n'
            '   ICN-Stage install:   \n\n'
            '       This software is responsible for installing the ICN-Stage.    \n'
            '       In addition, it is possible to install the ICN-Stage    \n'
            '       locally, in the Vagrant box and remotely, in addition   \n'
            '       to the dependencies necessary for its operation    \n'
            '     \n'
            '       The equipment settings file is possible to define   \n'
            '       a topology of the directories responsible for the   \n'
            '       control and recovery of the ICN-Stage.   \n'
            '     \n'  
            '   OPTIONS:\n'
            '    \n'
            '       -lc, --local    | Used for local installation.    \n'
            '       -vg, --vagrant  | Used for vagrant-box installation.   \n'
            '       -rm, --remote   | Used for remote installation.    \n'
            '       -l,  --log      | Used to define logging level info.   \n'
            '       -s,  --settings | Used to define an internal settings file.    \n'
            '       -i,  --id       | Used to define unique id for multiple daemons.   \n'
            '       -r,  --req      | Used to define an external requirements file.    \n'
            '       -h,  --help     | Used to show this information.   \n'
            '    \n')

    logging.info(info)


def main():
    parser = argparse.ArgumentParser(description='Daemon Worker')
    help_msg = "logging level (INFO=%d DEBUG=%d)" % (logging.INFO, logging.DEBUG)
    parser.add_argument("--log", "-l", help=help_msg, default=logging.INFO, type=int)
    help_msg = "unique id (str) for multiple daemons"
    parser.add_argument("--id", "-i", help=help_msg, default="default", type=str)
    help_msg = "requirements file"
    parser.add_argument("--requirements", "-r", help=help_msg, default=DEFAULT_REQUIREMENTS_FILE, type=str)
    help_msg = "settings file"
    parser.add_argument("--settings", "-s", help=help_msg, default=DEFAULT_SETTINGS_FILE, type=str)
    install_choices = ['local', 'vagrant', 'remote_single', 'remote_ensemble']
    parser.add_argument('install', choices=install_choices)

    # read arguments from the command line

    args = parser.parse_args()

    # setup the logging facility

    if args.log == logging.DEBUG:
        logging.basicConfig(format='%(asctime)s %(levelname)s {%(module)s} [%(funcName)s] %(message)s',
                            datefmt=TIME_FORMAT, level=args.log)

    else:

        logging.basicConfig(format='%(asctime)s %(message)s',
                            datefmt=TIME_FORMAT, level=args.log)

    # shows input parameters
    logging.info("")
    logging.info("INPUT")
    logging.info("---------------------")
    logging.info("\t logging level     : %s" % args.log)
    logging.info("\t unique id         : %s" % args.id)
    logging.info("\t install option    : %s" % args.install)
    logging.info("\t requirements file : %s" % args.requirements)
    logging.info("\t settings file     : %s" % args.settings)
    logging.info("")

    installer = Installer()

    if args.install == 'local':
        installer.local_install()

    elif args.install == 'vagrant':
        installer.local_install()
        installer.vagrant_config()

    elif args.install == 'remote':
        installer.remote_install()


if __name__ == '__main__':
    sys.exit(main())
