#!/usr/bin/python3
# -*- coding: iso-8859-15 -*-

#   )-*- ICN-Stage -*-)
#   Installer Directors

import argparse
import os
import re
import json
import subprocess
import sys
import time
import logging
import time

from zookeeper_controller import ZookeeperController

try:

    from paramiko import SSHClient
    import paramiko

except ImportError as error:

    print(error)
    print()
    print("1. Setup a virtual environment: ")
    print("  python3 - m venv ~/Python3env/icn-stage ")
    print("  source ~/Python3env/icn-stage/bin/activate ")
    print()
    print("2. Install requirements:")
    print("  pip3 install --upgrade pip")
    print("  pip3 install -r requirements.txt \n")
    quit()

# % Low level % default variable settings.

LOG_LEVEL = logging.DEBUG
TIME_FORMAT = '%Y-%m-%d,%H:%M:%S'
DEFAULT_SETTINGS_FILE = 'settings.json'
DEFAULT_REQUIREMENTS_FILE = 'requirements.txt'
DEFAULT_ZK_SETTINGS_FILE_DIR = 'apache-zookeeper-3.6.1/conf/zoo.cfg'
DEFAULT_VALUE_SETTINGS = [5, 6000, 12000, 10, 5, 2181, 256]
DEFAULT_ZK_LOCAL_MYID = 'data/zk/datadir/myid'
DEFAULT_PATHS = ['data', 'data/zk', 'data/zk/datadir']
DEFAULT_REPOSIT_DEPENDENCES = []
DEFAULT_ZK_DIR = 'apache-zookeeper-3.6.1'
DEFAULT_REPOSIT_ZK = 'http://mirror.nbtelecom.com.br/apache/zookeeper/zookeeper-3.6.1/apache-zookeeper-3.6.1-bin.tar.gz'
DEFAULT_REPOSIT_ICNSTAGE = 'https://github.com/kayua/icn-stage'
DEFAULT_SERVER_SETTINGS = ['ID', 'Host', 'User', 'Password']
DEFAULT_DEPENDENCES = ['kazoo', 'paramiko', 'scp', 'netifaces', 'pyfiglet', 'tqdm', 'psutil']
DEFAULT_ZK_SETTINGS = ['TickTime', 'MinSessionTimeOut', 'MaxSessionTimeOut', 'InitLimit', 'SyncLimit', 'ClientPort',
                       'MaxClientCnxns']


class ZookeeperEnsembleSettings:
    demo_setting_zk = """
    
#         File Settings Apache-Zookeeper.
#                
#   This Apache Zookeeper software configuration file was
#   automatically generated by ICN-Stage.
#   This file contains information regarding the
#   settings regarding the distributed installation
#   of ICN-State in its basic mode.
#   
#   The information in this file can be changed through
#   the Settings.json file in the ICN-Stage ~/Settings directory.
#   Play the ICN-Stage installation file when changing the file.
#   This file must remain next to the Apache-Zookeeper directory.

#   Settings Apache-Zookeeper:\n
"""
    server_list = []
    def __init__(self):
        #TODO revisar uso de metodos dentro do init. Tipicamente, isso não deveria acontecer
        self.read_settings_file()
        self.write_settings_in_file()

    def read_settings_file(self):

        logging.info(' Please Wait: Reading file Settings...\n')

        if os.path.exists(DEFAULT_SETTINGS_FILE):

            with open(DEFAULT_SETTINGS_FILE) as Settings:

                try:

                    SettingsFile = json.load(Settings)
                    print('\n' + (' ' * 20) + ('-' * 32) + '\n')
                    logging.info('Zookeeper Settings:\n')

                    if len(SettingsFile['Server']) == 1:

                        print(' ' * 21 + 'Mode: Single.\n')

                    else:

                        print(' ' * 21 + 'Mode: Ensambled\n')

                    for IdParameter, Parameter in enumerate(DEFAULT_ZK_SETTINGS):

                        DEFAULT_VALUE_SETTINGS[IdParameter] = (SettingsFile['Settings'][0][Parameter])
                        print(' ' * 20, DEFAULT_ZK_SETTINGS[IdParameter], DEFAULT_VALUE_SETTINGS[IdParameter])

                    print('\n')
                    logging.info('ICN-Stage Servers Directors:\n')

                    for Iterator in SettingsFile['Server']:

                        log = ('  ' + 'Server ID: ' + Iterator['Id'] + ' Host: ' + Iterator['Host'])
                        logging.info(log)
                        NewServer = [{DEFAULT_SERVER_SETTINGS[0]: Iterator['Id']},
                                     {DEFAULT_SERVER_SETTINGS[1]: Iterator['Host']},
                                     {DEFAULT_SERVER_SETTINGS[2]: Iterator['UserName']},
                                     {DEFAULT_SERVER_SETTINGS[3]: Iterator['Password']}]
                        self.server_list.append(NewServer)

                    print('')
                    logging.info('-' * 32 + '\n\n')

                except ValueError:

                    logging.error('The configuration Settings.json file may be corrupted.', ValueError)
        else:

            logging.error('The configuration Settings.json file not found.')
            quit()

    def write_settings_in_file(self):

        for key, parameters in enumerate(DEFAULT_ZK_SETTINGS):
            self.demo_setting_zk += (str(parameters) + '=' + str(DEFAULT_VALUE_SETTINGS[key]) + '\n')

        for server in self.server_list:
            self.demo_setting_zk += ('Server.' + server[0]['ID'] + '=' + server[1]['Host'] + ':2888:3888\n')
        #TODO ZookeeperController.create_zookeeper_config_file()

    @staticmethod
    def define_director_id(server):

        return server[DEFAULT_SERVER_SETTINGS[0]]


class Connect:
    State = False

    def __init__(self, server):

        logging.info('Contacting Server ID: ' + str(server[0]['ID']) + ' Host: ' + server[1]['Host'])
        logging.info('Awaiting Response.Please wait...')
        self.ssh = SSHClient()
        self.ssh.load_system_host_keys()
        self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        try:
            self.ssh.connect(hostname=server[1]['Host'], username=server[2]['User'],
                             password=str(server[3]['Password']))
            self.State = True
            print('')
        except ValueError:

            logging.error(' Connection refused.', ValueError)
            self.State = False

    def get_state_connection(self):

        return self.State

    def close_connection(self):

        self.State = False
        self.ssh.close()

    def cmd(self, cmd):

        try:

            std, stdout, stderr = self.ssh.exec_command(cmd)
            return stdout.read()

        except ValueError:

            self.State = False


class Installer:

    def __init__(self):

        self.DependenceMissing = []
        self.settings = ZookeeperEnsembleSettings()
        self.zookeeper_settings = self.settings.demo_setting_zk

    def local_install(self):

        logging.info('-' * 32 + '\n')
        logging.info('Starting local installer. Please wait...\n')

        try:

            self.local_install_zookeeeper()
            self.local_install_dependence()
            self.local_create_dir()
            self.local_settings_zookeeper()

            logging.info('Done.')

        except ValueError:

            logging.error('Error during installation.', ValueError)

    @staticmethod
    def local_install_zookeeeper():

        logging.info('  Starting Zookeeper installer.\n')
        logging.info('     > Downloading Apache-Zookeeper-3.6.1\n')

        try:

            cmd = ['wget', DEFAULT_REPOSIT_ZK]
            subprocess.call(cmd)
            logging.info('      > Extracting files from Apache Zookeeper.\n')
            cmd = ['tar', 'zxf', 'apache-zookeeper-3.6.1-bin.tar.gz']
            subprocess.run(cmd)
            cmd = ['mv', 'apache-zookeeper-3.6.1-bin', 'apache-zookeeper-3.6.1']
            subprocess.run(cmd)
            cmd = ['rm', 'apache-zookeeper-3.6.1-bin.tar.gz']
            subprocess.run(cmd)
            logging.info('-' * 32 + '\n')

        except ValueError:

            logging.error('It is not possible to install Apache-Zookeeper', ValueError)
            quit()

    @staticmethod
    def local_install_dependence():

        logging.info('Starting dependency installer. Please wait...\n')

        try:

            logging.info('     > Update python3-pip\n')
            cmd = ['apt-get', 'install', 'python3-pip']
            subprocess.Popen(cmd, stdout=subprocess.PIPE)
            cmd = ['pip3', 'install', '--upgrade', 'pip']
            subprocess.run(cmd)
            logging.info('     > Install requirements.\n')
            cmd = ['pip3', 'install', '-r', 'requirements.txt']
            subprocess.run(cmd)
            logging.info('Done. Dependence installed.\n')
            logging.info('-' * 32 + '\n')

        except ValueError:

            logging.error('It is not possible to install dependence.', ValueError)
            quit()

    def local_settings_zookeeper(self):

        logging.info('Generating Apache-Zookeeper settings file. Please wait...')

        try:

            with open(DEFAULT_ZK_SETTINGS_FILE_DIR, 'w') as zoo_config:

                zoo_config.write(self.zookeeper_settings)
                zoo_config.close()

            with open(DEFAULT_ZK_LOCAL_MYID, 'w') as zoo_id:

                zoo_id.write('1')
                zoo_id.close()

        except ValueError:

            logging.error('Settings Apache-Zookeeper file.', ValueError)
            quit()

    @staticmethod
    def local_create_dir():

        logging.info('Creating the Apache-Zookepeer file directory. Please wait...')

        for path_dir in DEFAULT_PATHS:
            cmd = 'mkdir ' + path_dir
            print(cmd)
            subprocess.run(cmd)

    def remote_install(self):

        logging.info('Starting remote installer. Please wait...\n')

        for server in self.settings.server_list:

            connection = Connect(server)

            if connection.get_state_connection():

                try:

                    self.remote_install_icn_stage(connection)
                    self.remote_install_zookeeper(connection)
                    logging.info('Starting a remote installation of dependencies.\n')
                    self.remote_list_dependence(connection)
                    self.remote_install_dependence(connection, self.DependenceMissing)
                    self.remote_create_dir(connection)
                    self.remote_settings_zookeeper(connection, server)
                    connection.close_connection()

                except ValueError:

                    logging.error('Error during installation', ValueError)

            else:

                logging.error('Connection Refused')

        logging.info('Sucessfull installation.\n\n')

    @staticmethod
    def remote_create_dir(connection):

        logging.info('Creating the Apache-Zookepeer file directory. Please wait...')

        for path_dir in DEFAULT_PATHS:
            cmd = 'mkdir icn-stage/' + path_dir
            connection.cmd(cmd)

    def remote_list_dependence(self, connection):

        logging.info('      > Starting a remote list dependencies.\n')

        cmd = 'apt list --installed'
        server_response = connection.cmd(cmd)
        dependence_checked = []

        if not connection.get_state_connection():

            logging.error('Connection refused.')

        for requirements in DEFAULT_DEPENDENCES:

            if isinstance(re.search(requirements, str(server_response)), type(None)):

                self.DependenceMissing.append(requirements)

            else:

                dependence_checked.append(requirements)

        logging.info('      Installed Dependencies:\n')
        for num_dep, dependence in enumerate(dependence_checked):
            logging.info('              ' + str(num_dep) + ' - ' + dependence)
        logging.info('')
        logging.info('      Missing Dependencies:\n')

        for num_dep, dependence in enumerate(self.DependenceMissing):
            logging.info('              ' + str(num_dep) + ' - ' + dependence)
        logging.info('')
        return self.DependenceMissing

    @staticmethod
    def remote_install_dependence(connection, dependence_list):

        if len(dependence_list):

            logging.info('     > Dependencies installer. Please wait...\n')

            try:

                logging.info('       > Update python3-pip\n')
                cmd = 'apt-get install python3-pip'
                connection.cmd(cmd)
                cmd = 'pip3 install --upgrade pip'
                connection.cmd(cmd)
                logging.info('       > Install requirements.\n')

                for requirements in dependence_list:

                    logging.info('            > Installing: ' + requirements + '\n')
                    cmd = 'pip3 install' + requirements
                    connection.cmd(cmd)

                logging.info('  Dependence installed.\n\n')

            except ValueError:

                logging.error('It is not possible to install dependencies.', ValueError)
                quit()

    @staticmethod
    def remote_install_icn_stage(connection):

        logging.info('Starting ICN-Stage remote installer. Please wait...\n')

        try:

            logging.info('     > Settings git clone. Please wait...\n')
            cmd = 'sudo apt-get install git '
            connection.cmd(cmd)
            logging.info('     > Downloading ICN-Stage. Please wait...\n')
            cmd = 'git clone ' + DEFAULT_REPOSIT_ICNSTAGE
            connection.cmd(cmd)
            logging.info('  ICN-Stage installation completed.\n\n')

        except ValueError:

            logging.error('Downloading of ICN-Stage failed!.', ValueError)
            quit()

    @staticmethod
    def remote_install_zookeeper(connection):

        logging.info('Starting Apache-Zookeeper-3.6.1 remote installer.\n')
        logging.info('     > Downloading Apache-Zookeeper-3.6.1.tar.gz. Please wait...\n')

        try:

            cmd = 'wget '+DEFAULT_REPOSIT_ZK
            connection.cmd(cmd)
            logging.info('     > Extracting files from Apache Zookeeper. Please wait...\n')
            cmd = 'tar zxf apache-zookeeper-3.6.1-bin.tar.gz'
            connection.cmd(cmd)
            cmd = 'mv apache-zookeeper-3.6.1-bin icn-stage/apache-zookeeper-3.6.1'
            connection.cmd(cmd)
            cmd = 'rm apache-zookeeper-3.6.1-bin.tar.gz'
            connection.cmd(cmd)
            logging.info('  Apache-Zookeeper installation completed.\n\n')

        except ValueError:

            logging.error('Error Apache-Zookeeper install.', ValueError)

    def remote_settings_zookeeper(self, connection, server):

        logging.info('Generating Apache-Zookeeper settings file. Please wait...')

        try:

            cmd = 'echo "' + self.zookeeper_settings + '" > icn-stage/'+DEFAULT_ZK_SETTINGS_FILE_DIR
            connection.cmd(cmd)
            cmd = 'echo "' + str(server[0]['ID']) + '" > icn-stage/' + DEFAULT_ZK_LOCAL_MYID
            connection.cmd(cmd)
            logging.info('Settings file generated.')

        except ValueError:

            logging.error('Settings Apache-Zookeeper file.', ValueError)
            quit()

    @staticmethod
    def vagrant_inbox_install():

        print('config')


def main():

    parser = argparse.ArgumentParser(description='ICN-Stage Director Install')
    help_msg = "logging level (INFO=%d DEBUG=%d)" % (logging.INFO, logging.DEBUG)
    parser.add_argument("--log", "-l", help=help_msg, default=logging.INFO, type=int)
    help_msg = "unique id (str) for multiple daemons"
    parser.add_argument("--id", "-i", help=help_msg, default="default", type=str)
    help_msg = "requirements file"
    parser.add_argument("--requirements", "-r", help=help_msg, default=DEFAULT_REQUIREMENTS_FILE, type=str)
    help_msg = "settings file"
    parser.add_argument("--settings", "-s", help=help_msg, default=DEFAULT_SETTINGS_FILE, type=str)
    cmd_choices = ['local', 'remote', 'vagrant-box']
    parser.add_argument('install', choices=cmd_choices)
    args = parser.parse_args()

#                    ICN-Stage install:
#
#      This software is responsible for installing the ICN-Stage.
#      In addition, it is possible to install the ICN-Stage
#      locally, in the Vagrant box and remotely, in addition
#      to the dependencies necessary for its operation.
#
#      The equipment settings file is possible to define
#      a topology of the directories responsible for the
#      control and recovery of the ICN-Stage.
#
#        OPTIONS:
#
#         -l,  --log           | Used to define logging level info.
#         -r,  --requirements  | Used to define an external requirements file.
#         -s,  --settings      | Used to define an internal settings file.
#         -i,  --id            | Used to define unique id for multiple daemons.
#         -h,  --help          | Used to show this information.
#         local                | Used for local installation.
#         remote               | Used for remote installation.
#         vagrant-box          | Used for vagrant-box installation.
#
#
    # setup the logging facility

    if args.log == logging.DEBUG:

        logging.basicConfig(format='%(asctime)s %(levelname)s {%(module)s} [%(funcName)s] %(message)s',
                            datefmt=TIME_FORMAT, level=args.log)

    else:

        logging.basicConfig(format='%(asctime)s %(message)s', datefmt=TIME_FORMAT, level=args.log)

    # shows input parameters.

    logging.info("")
    logging.info("INPUT")
    logging.info("-"*32)
    logging.info("\t logging level     : %s" % args.log)
    logging.info("\t unique id         : %s" % args.id)
    logging.info("\t install option    : %s" % args.install)
    logging.info("\t requirements file : %s" % args.requirements)
    logging.info("\t settings file     : %s" % args.settings)
    logging.info("")

    installer = Installer()

    if args.install == 'local':
        installer.local_install()

    elif args.install == 'remote':
        installer.remote_install()

    elif args.install == 'vagrant-box':
        installer.vagrant_inbox_install()


if __name__ == '__main__':
    sys.exit(main())
